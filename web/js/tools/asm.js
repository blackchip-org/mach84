/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var asm = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"statement":5,"line":6,"EOLN":7,"EOF":8,"instruction":9,"label":10,"SYMBOL":11,":":12,"EXPORT":13,"INSTRUCTION":14,"addressing_mode":15,"abs":16,"abx":17,"aby":18,"acc":19,"imm":20,"imp":21,"ind":22,"izx":23,"izy":24,"value":25,",":26,"X":27,"Y":28,"A":29,"#":30,"(":31,")":32,"expression":33,"+":34,"-":35,"*":36,"/":37,"&":38,"|":39,"^":40,"[":41,"]":42,"integer":43,"BINARY_INTEGER":44,"DECIMAL_INTEGER":45,"HEXADECIMAL_INTEGER":46,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOLN",8:"EOF",11:"SYMBOL",12:":",13:"EXPORT",14:"INSTRUCTION",26:",",27:"X",28:"Y",29:"A",30:"#",31:"(",32:")",34:"+",35:"-",36:"*",37:"/",38:"&",39:"|",40:"^",41:"[",42:"]",44:"BINARY_INTEGER",45:"DECIMAL_INTEGER",46:"HEXADECIMAL_INTEGER"},
productions_: [0,[3,1],[4,2],[4,1],[5,2],[5,2],[5,1],[5,1],[5,2],[5,2],[6,1],[6,2],[6,1],[10,2],[10,3],[9,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[16,1],[17,3],[18,3],[19,1],[20,2],[21,0],[22,3],[23,5],[24,5],[25,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,1],[33,1],[43,1],[43,1],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: if ( $$[$0] ) { return $$[$0]; } else { return []; } 
break;
case 2:
        if ( $$[$0] ) {
            this.$ = $$[$0-1].concat($$[$0]);
        } else {
            this.$ = $$[$0-1];
        }
    
break;
case 3: if ( $$[$0] ) { this.$ = [$$[$0]]; } 
break;
case 4: $$[$0-1].line = yylineno; this.$ = $$[$0-1]; 
break;
case 5: $$[$0-1].line = yylineno + 1; this.$ = $$[$0-1]; 
break;
case 6: this.$ = false; 
break;
case 7: this.$ = false; 
break;
case 8: this.$ = {error: true, line: yylineno}; 
break;
case 9: this.$ = {error: true, line: yylineno}; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: $$[$0].label = $$[$0-1]; this.$ = $$[$0]; 
break;
case 12: this.$ = { label: $$[$0] }; 
break;
case 13: this.$ = $$[$0-1]; 
break;
case 14: yy.exports[$$[$0-1]] = true; this.$ = $$[$0-1]; 
break;
case 15:
        var op = $$[$0-1];
        var mode = $$[$0].mode;
        var modes = yy.lookup[op];
        // If the instruction supports relative addressing, it only
        // supports relative addressing
        if ( mode === "abs" && modes.rel ) {
            mode = "rel";
        }
        if ( _.isUndefined(modes[mode]) ) {
            var expected = _.keys(modes).join(", ");
            yy.errors.push("Invalid addressing mode for " + op + ": " + mode +
                "\nExpected " + expected);
            this.$ = { error: true };
        } else {
            this.$ = {
                op: op,
                mode: mode,
                arg: $$[$0].arg
            };
        }
    
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = $$[$0]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = $$[$0]; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = $$[$0]; 
break;
case 25: this.$ = { mode: "abs", arg: $$[$0] }; 
break;
case 26: this.$ = { mode: "abx", arg: $$[$0-2] }; 
break;
case 27: this.$ = { mode: "aby", arg: $$[$0-2] }; 
break;
case 28: this.$ = { mode: "acc" }; 
break;
case 29: this.$ = { mode: "imm", arg: $$[$0] }; 
break;
case 30: this.$ = { mode: "imp" }; 
break;
case 31: this.$ = { mode: "ind", arg: $$[$0-1] }; 
break;
case 32: this.$ = { mode: "izx", arg: $$[$0-3] }; 
break;
case 33: this.$ = { mode: "izy", arg: $$[$0-3] }; 
break;
case 34: this.$ = $$[$0]; 
break;
case 35: this.$ = { op: "+", val: [$$[$0-2], $$[$0]] }; 
break;
case 36: this.$ = { op: "-", val: [$$[$0-2], $$[$0]] }; 
break;
case 37: this.$ = { op: "*", val: [$$[$0-2], $$[$0]] }; 
break;
case 38: this.$ = { op: "floor", val: { op: "/", val: [$$[$0-2], $$[$0]] } }; 
break;
case 39: this.$ = { op: "&", val: [$$[$0-2], $$[$0]] }; 
break;
case 40: this.$ = { op: "|", val: [$$[$0-2], $$[$0]] }; 
break;
case 41: this.$ = { op: "^", val: [$$[$0-2], $$[$0]] }; 
break;
case 42: this.$ = { op: "negate", val: $$[$0] }; 
break;
case 43: this.$ = $$[$0-1]; 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = { symbol: $$[$0]}; 
break;
case 46: this.$ = parseInt($$[$0].substring(1), 2); 
break;
case 47: this.$ = parseInt($$[$0], 10); 
break;
case 48: this.$ = parseInt($$[$0].substring(1), 16); 
break;
}
},
table: [{2:[1,7],3:1,4:2,5:3,6:4,7:[1,5],8:[1,6],9:8,10:9,11:[1,11],13:[1,12],14:[1,10]},{1:[3]},{1:[2,1],2:[1,7],5:13,6:4,7:[1,5],8:[1,6],9:8,10:9,11:[1,11],13:[1,12],14:[1,10]},{1:[2,3],2:[2,3],7:[2,3],8:[2,3],11:[2,3],13:[2,3],14:[2,3]},{7:[1,14],8:[1,15]},{1:[2,6],2:[2,6],7:[2,6],8:[2,6],11:[2,6],13:[2,6],14:[2,6]},{1:[2,7],2:[2,7],7:[2,7],8:[2,7],11:[2,7],13:[2,7],14:[2,7]},{7:[1,16],8:[1,17]},{7:[2,10],8:[2,10]},{7:[2,12],8:[2,12],9:18,14:[1,10]},{7:[2,30],8:[2,30],11:[1,37],15:19,16:20,17:21,18:22,19:23,20:24,21:25,22:26,23:27,24:28,25:29,29:[1,30],30:[1,31],31:[1,32],33:33,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{12:[1,41]},{11:[1,42]},{1:[2,2],2:[2,2],7:[2,2],8:[2,2],11:[2,2],13:[2,2],14:[2,2]},{1:[2,4],2:[2,4],7:[2,4],8:[2,4],11:[2,4],13:[2,4],14:[2,4]},{1:[2,5],2:[2,5],7:[2,5],8:[2,5],11:[2,5],13:[2,5],14:[2,5]},{1:[2,8],2:[2,8],7:[2,8],8:[2,8],11:[2,8],13:[2,8],14:[2,8]},{1:[2,9],2:[2,9],7:[2,9],8:[2,9],11:[2,9],13:[2,9],14:[2,9]},{7:[2,11],8:[2,11]},{7:[2,15],8:[2,15]},{7:[2,16],8:[2,16]},{7:[2,17],8:[2,17]},{7:[2,18],8:[2,18]},{7:[2,19],8:[2,19]},{7:[2,20],8:[2,20]},{7:[2,21],8:[2,21]},{7:[2,22],8:[2,22]},{7:[2,23],8:[2,23]},{7:[2,24],8:[2,24]},{7:[2,25],8:[2,25],26:[1,43]},{7:[2,28],8:[2,28]},{11:[1,37],25:44,33:33,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{11:[1,37],25:45,33:33,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{7:[2,34],8:[2,34],26:[2,34],32:[2,34],34:[1,46],35:[1,47],36:[1,48],37:[1,49],38:[1,50],39:[1,51],40:[1,52]},{11:[1,37],33:53,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{11:[1,37],33:54,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{7:[2,44],8:[2,44],26:[2,44],32:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],42:[2,44]},{7:[2,45],8:[2,45],26:[2,45],32:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],42:[2,45]},{7:[2,46],8:[2,46],26:[2,46],32:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],42:[2,46]},{7:[2,47],8:[2,47],26:[2,47],32:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],42:[2,47]},{7:[2,48],8:[2,48],26:[2,48],32:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],42:[2,48]},{7:[2,13],8:[2,13],14:[2,13]},{12:[1,55]},{27:[1,56],28:[1,57]},{7:[2,29],8:[2,29]},{26:[1,59],32:[1,58]},{11:[1,37],33:60,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{11:[1,37],33:61,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{11:[1,37],33:62,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{11:[1,37],33:63,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{11:[1,37],33:64,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{11:[1,37],33:65,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{11:[1,37],33:66,35:[1,34],41:[1,35],43:36,44:[1,38],45:[1,39],46:[1,40]},{7:[2,42],8:[2,42],26:[2,42],32:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],42:[2,42]},{34:[1,46],35:[1,47],36:[1,48],37:[1,49],38:[1,50],39:[1,51],40:[1,52],42:[1,67]},{7:[2,14],8:[2,14],14:[2,14]},{7:[2,26],8:[2,26]},{7:[2,27],8:[2,27]},{7:[2,31],8:[2,31],26:[1,68]},{27:[1,69]},{7:[2,35],8:[2,35],26:[2,35],32:[2,35],34:[2,35],35:[2,35],36:[1,48],37:[1,49],38:[2,35],39:[2,35],40:[2,35],42:[2,35]},{7:[2,36],8:[2,36],26:[2,36],32:[2,36],34:[2,36],35:[2,36],36:[1,48],37:[1,49],38:[2,36],39:[2,36],40:[2,36],42:[2,36]},{7:[2,37],8:[2,37],26:[2,37],32:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],42:[2,37]},{7:[2,38],8:[2,38],26:[2,38],32:[2,38],34:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],42:[2,38]},{7:[2,39],8:[2,39],26:[2,39],32:[2,39],34:[1,46],35:[1,47],36:[1,48],37:[1,49],38:[2,39],39:[2,39],40:[2,39],42:[2,39]},{7:[2,40],8:[2,40],26:[2,40],32:[2,40],34:[1,46],35:[1,47],36:[1,48],37:[1,49],38:[1,50],39:[2,40],40:[1,52],42:[2,40]},{7:[2,41],8:[2,41],26:[2,41],32:[2,41],34:[1,46],35:[1,47],36:[1,48],37:[1,49],38:[1,50],39:[2,41],40:[2,41],42:[2,41]},{7:[2,43],8:[2,43],26:[2,43],32:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],42:[2,43]},{28:[1,70]},{32:[1,71]},{7:[2,33],8:[2,33]},{7:[2,32],8:[2,32]}],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: return "EOLN"; 
break;
case 2: return "("; 
break;
case 3: return ")"; 
break;
case 4: return "["; 
break;
case 5: return "]"; 
break;
case 6: return ":"; 
break;
case 7: return "+"; 
break;
case 8: return "*"; 
break;
case 9: return "/"; 
break;
case 10: return "&"; 
break;
case 11: return "|"; 
break;
case 12: return "^"; 
break;
case 13: return ","; 
break;
case 14: return "#"; 
break;
case 15: return "A"; 
break;
case 16: return "X"; 
break;
case 17: return "Y"; 
break;
case 18: return "INSTRUCTION"; 
break;
case 19: return "INSTRUCTION"; 
break;
case 20: return "INSTRUCTION"; 
break;
case 21: return "INSTRUCTION"; 
break;
case 22: return "INSTRUCTION"; 
break;
case 23: return "INSTRUCTION"; 
break;
case 24: return "INSTRUCTION"; 
break;
case 25: return "INSTRUCTION"; 
break;
case 26: return "INSTRUCTION"; 
break;
case 27: return "INSTRUCTION"; 
break;
case 28: return "INSTRUCTION"; 
break;
case 29: return "INSTRUCTION"; 
break;
case 30: return "INSTRUCTION"; 
break;
case 31: return "INSTRUCTION"; 
break;
case 32: return "INSTRUCTION"; 
break;
case 33: return "INSTRUCTION"; 
break;
case 34: return "INSTRUCTION"; 
break;
case 35: return "INSTRUCTION"; 
break;
case 36: return "INSTRUCTION"; 
break;
case 37: return "INSTRUCTION"; 
break;
case 38: return "INSTRUCTION"; 
break;
case 39: return "INSTRUCTION"; 
break;
case 40: return "INSTRUCTION"; 
break;
case 41: return "INSTRUCTION"; 
break;
case 42: return "INSTRUCTION"; 
break;
case 43: return "INSTRUCTION"; 
break;
case 44: return "INSTRUCTION"; 
break;
case 45: return "INSTRUCTION"; 
break;
case 46: return "INSTRUCTION"; 
break;
case 47: return "INSTRUCTION"; 
break;
case 48: return "INSTRUCTION"; 
break;
case 49: return "INSTRUCTION"; 
break;
case 50: return "INSTRUCTION"; 
break;
case 51: return "INSTRUCTION"; 
break;
case 52: return "INSTRUCTION"; 
break;
case 53: return "INSTRUCTION"; 
break;
case 54: return "INSTRUCTION"; 
break;
case 55: return "INSTRUCTION"; 
break;
case 56: return "INSTRUCTION"; 
break;
case 57: return "INSTRUCTION"; 
break;
case 58: return "INSTRUCTION"; 
break;
case 59: return "INSTRUCTION"; 
break;
case 60: return "INSTRUCTION"; 
break;
case 61: return "INSTRUCTION"; 
break;
case 62: return "INSTRUCTION"; 
break;
case 63: return "INSTRUCTION"; 
break;
case 64: return "INSTRUCTION"; 
break;
case 65: return "INSTRUCTION"; 
break;
case 66: return "INSTRUCTION"; 
break;
case 67: return "INSTRUCTION"; 
break;
case 68: return "INSTRUCTION"; 
break;
case 69: return "INSTRUCTION"; 
break;
case 70: return "INSTRUCTION"; 
break;
case 71: return "INSTRUCTION"; 
break;
case 72: return "INSTRUCTION"; 
break;
case 73: return "INSTRUCTION"; 
break;
case 74: return "INSTRUCTION"; 
break;
case 75: return "INSTRUCTION"; 
break;
case 76: return "INSTRUCTION"; 
break;
case 77: return "INSTRUCTION"; 
break;
case 78: return "INSTRUCTION"; 
break;
case 79: return "INSTRUCTION"; 
break;
case 80: return "INSTRUCTION"; 
break;
case 81: return "EXPORT"; 
break;
case 82: return "BINARY_INTEGER"; 
break;
case 83: return "DECIMAL_INTEGER"; 
break;
case 84: return "HEXADECIMAL_INTEGER"; 
break;
case 85: return "-"; 
break;
case 86: return "SYMBOL"; 
break;
case 87: return "EOF"; 
break;
}
},
rules: [/^(?:[ \t]+)/,/^(?:\n)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:,)/,/^(?:#)/,/^(?:a\b)/,/^(?:x\b)/,/^(?:y\b)/,/^(?:adc\b)/,/^(?:and\b)/,/^(?:asl\b)/,/^(?:bit\b)/,/^(?:brk\b)/,/^(?:bcc\b)/,/^(?:bcs\b)/,/^(?:beq\b)/,/^(?:bmi\b)/,/^(?:bne\b)/,/^(?:bpl\b)/,/^(?:bra\b)/,/^(?:bvc\b)/,/^(?:bvs\b)/,/^(?:cmp\b)/,/^(?:bvs\b)/,/^(?:cmp\b)/,/^(?:dec\b)/,/^(?:dex\b)/,/^(?:dey\b)/,/^(?:cpx\b)/,/^(?:cpy\b)/,/^(?:eor\b)/,/^(?:clc\b)/,/^(?:cld\b)/,/^(?:cli\b)/,/^(?:clv\b)/,/^(?:sec\b)/,/^(?:sed\b)/,/^(?:sei\b)/,/^(?:inc\b)/,/^(?:inx\b)/,/^(?:iny\b)/,/^(?:jmp\b)/,/^(?:jsr\b)/,/^(?:lda\b)/,/^(?:ldx\b)/,/^(?:ldy\b)/,/^(?:lsr\b)/,/^(?:nop\b)/,/^(?:ora\b)/,/^(?:rol\b)/,/^(?:ror\b)/,/^(?:rts\b)/,/^(?:rti\b)/,/^(?:sbc\b)/,/^(?:sta\b)/,/^(?:pha\b)/,/^(?:php\b)/,/^(?:phx\b)/,/^(?:phy\b)/,/^(?:pla\b)/,/^(?:plp\b)/,/^(?:plx\b)/,/^(?:ply\b)/,/^(?:tsx\b)/,/^(?:txs\b)/,/^(?:stx\b)/,/^(?:sty\b)/,/^(?:tax\b)/,/^(?:tay\b)/,/^(?:txa\b)/,/^(?:tya\b)/,/^(?:\.export\b)/,/^(?:%-?[01]+\b)/,/^(?:-?[0-9]+\b)/,/^(?:\$-?[0-9a-fA-F]+\b)/,/^(?:-)/,/^(?:[a-zA-z\._][a-zA-Z\._0-9]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();